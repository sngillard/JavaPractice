package com.company;

import com.company.model.LPAStudent;
import com.company.model.Student;

import java.util.ArrayList;
import java.util.List;

record Employee(String name) implements QueryItem {

    @Override
    public boolean matchFieldValue(String fieldName, String value) {
        return false;
    }
}

public class Main {

    public static void main(String[] args) {

        int studentCount = 10;
        List<Student> students = new ArrayList<>();
        for (int i = 0; i < studentCount; i++) {
            students.add(new Student());
        }
        students.add(new LPAStudent());
//        printList(students);
        printMoreLists(students);

        List<LPAStudent> lpaStudents = new ArrayList<>();
        for (int i = 0; i < studentCount; i++) {
            lpaStudents.add(new LPAStudent());
        }
//        printList(lpaStudents);
        printMoreLists(lpaStudents);

        testList(new ArrayList<String>(List.of("Able", "Barry", "Charlie")));
        testList(new ArrayList<Integer>(List.of(1, 2, 3)));

        var queryList = new QueryList<>(lpaStudents);
        var matches = queryList.getMatches("Course", "Java");
        printMoreLists(matches);

        var students2021 = QueryList.getMatches(students, "YearStarted", "2021");
        printMoreLists(students2021);
        //type is inferred by the argument being passed

//        QueryList<Employee> employeeList = new QueryList<>();
        //Employee is not a subtype of Student, so it's not a valid type argument for our Query List, so we commented out.
    }

    public static void printMoreLists(List<? extends Student> students) {
        //? is a wildcard

        for (var student : students) {
            System.out.println(student);
        }
        System.out.println();
    }

    public static void testList(List<?> list) {

        for (var element : list) {
            if (element instanceof  String s) {
                System.out.println("String: " + s.toUpperCase());
                //if element is of type String, print this
            } else if (element instanceof Integer i) {
                System.out.println("Integer: " + i.floatValue());
                //if element is of type Integer, print this
            }
        }
    }

    //error that two methods clash bc they have the same erasure, this is because neither has an upper bound so they both get replaced with type Object at compile time, so we use above method with wildcard instead
//    public static void testList(List<String> list) {
//
//        for (var element : list) {
//            System.out.println("String: " + element.toUpperCase());
//        }
//    }
//
//    public static void testList(List<Integer> list) {
//
//        for (var element : list) {
//            System.out.println("Integer: " + element.floatValue());
//        }
//    }

//    public static <T extends Student> void printList(List<T> students) {
//        //<T> says it will take a List of any type
//        //<T extends Student> says the method can be used for a List of Students or a subtype of Students
//
//        for (var student : students) {
//            System.out.println(student.getYearStarted() + ": " + student);
//        }
//        System.out.println();
//    }
}
