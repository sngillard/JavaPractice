package com.company;

//Mammal abstract class
abstract class Mammal extends Animal {

    public Mammal(String type, String size, double weight) {
        super(type, size, weight);
    }

    @Override
    public void move(String speed) {

        System.out.print(getExplicitType() + " ");
        System.out.println( speed.equals("slow") ? "walks" : "runs");
    }

    public abstract void shedHair();
}
    /*an abstract class that extends another abstract class (like Mammal extending Animal) has some flexibility
    It can implement all of the parent's abstract methods
    It can implement some of them or none of them
    It can also include additional abstract methods, which will force
    subclasses to implement both Animal's abstract methods, as well as Mammal's*/

//Animal abstract class
public abstract class Animal {

    protected String type; //subclasses can access protected without using getter method
    private String size;
    private double weight;

    //constructor
    public Animal(String type, String size, double weight) {
        this.type = type;
        this.size = size;
        this.weight = weight;
    }

    //abstract methods (no {} because abstract methods don't have method body)
    public abstract void move(String speed);
    public abstract void makeNoise();
    //also, abstract methods cannot be private
    //abstract means subclasses have to define this method!

    //concrete method
    public final String getExplicitType() {
        return getClass().getSimpleName() + " (" + type + ")";
    }
}
