package com.company;

import java.util.LinkedList;
import java.util.ListIterator;

public class Main {

    public static void main(String[] args) {

//        LinkedList<String> placesToVisit = new LinkedList<>();
        var placesToVisit = new LinkedList<String>();

        placesToVisit.add("Boston");
        placesToVisit.add(0, "Worcester");
        System.out.println(placesToVisit);

        addMoreElement(placesToVisit);
        System.out.println(placesToVisit);

//        removeElements(placesToVisit);
//        System.out.println(placesToVisit);

//        gettingElements(placesToVisit);

        printItinerary(placesToVisit); //uses traditional for each loop

        printItinerary2(placesToVisit); //uses for each loop

        printItinerary3(placesToVisit); //uses ListIterator
    }

    private static void addMoreElement(LinkedList<String> list) {

        list.addFirst("Plymouth");
        list.addLast("Cambridge");
        //Queue methods
        list.offer("Amherst");
        list.offerFirst("Springfield");
        list.offerLast("New Bedford");
        //Stack Methods
        list.push("Bourne");
    }

    private static void removeElements(LinkedList<String> list) {

        list.remove(3);
        list.remove("New Bedford");

        System.out.println(list);
        String s1 = list.remove(); // removes first element
        System.out.println(s1 + " was removed");

        String s2 = list.removeFirst(); // removes first element
        System.out.println(s2 + " was removed");

        String s3 = list.removeLast(); // removes last element
        System.out.println(s3 + " was removed");
        //Queue poll methods
        String p1 = list.poll(); //removes first element
        System.out.println(p1 + " was removed");
        String p2 = list.pollFirst(); //removes first element
        System.out.println(p2 + " was removed");
        String p3 = list.pollLast(); //removes last element
        System.out.println(p3 + " was removed");

        list.push("Boston");
        list.push("Plymouth");
        list.push("Salem");
        System.out.println(list);

        String p4 = list.pop(); //removes first element
        System.out.println(p4 + " was removed");
    }

    private static void gettingElements(LinkedList<String> list) {

        System.out.println("Retrieved Element = " + list.get(4));

        System.out.println("First Element = " + list.getFirst());
        System.out.println("Last Element = " + list.getLast());

        System.out.println("Plymouth is at position: " + list.indexOf("Plymouth"));
        System.out.println("Boston is at position: " + list.lastIndexOf("Boston"));

        //Queue retrieval method
        System.out.println("Element from element() = " + list.element());
        //Stack retrieval method
        System.out.println("Element from peek() = " + list.peek());  //.peek() gets first element
        System.out.println("Element from peekFirst() = " + list.peekFirst()); //.peekFirst() gets first element
        System.out.println("Element from peekLast() = " + list.peekLast()); //.peekLast() gets last element
    }

    public static void printItinerary(LinkedList<String> list) {
    //traditional for loop example
        System.out.println("Trip starts at " + list.getFirst());
        for (int i = 1; i < list.size(); i++) {
            System.out.println("--> From " + list.get(i - 1) + " to " + list.get(i));
        }
        System.out.println("Trip ends at " + list.getLast());
    }

    public static void printItinerary2(LinkedList<String> list) {
    //for each loop example
        System.out.println("Trip starts at " + list.getFirst());
       String previousTown = list.getFirst();
       for (String town : list) {
           System.out.println("--> From: " + previousTown + " to " + town);
           previousTown = town;
       }
        System.out.println("Trip ends at " + list.getLast());
    }

    public static void printItinerary3(LinkedList<String> list) {
    //ListIterator example
        System.out.println("Trip starts at " + list.getFirst());
        String previousTown = list.getFirst();
        ListIterator<String> iterator = list.listIterator(1);
        while (iterator.hasNext()) {
            var town = iterator.next();
            System.out.println("--> From: " + previousTown + " to " + town);
            previousTown = town;
        }
        System.out.println("Trip ends at " + list.getLast());
    }
}
